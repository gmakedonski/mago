'use strict';
const path = require('path'),
  db = require(path.resolve('./config/lib/sequelize')),
  response = require(path.resolve("./config/responses.js")),
  models = db.models;
const winston = require("winston");
const Joi = require('joi');

/**
 * @api {put} /apiv3/devices/update/:deviceId Update Media Player
 * @apiVersion 0.3.0
 * @apiName UpdateMediaPlayer
 * @apiGroup DeviceAPI
 * @apiHeader {String} auth Auth string generated by the application.
 * @apiParam {String} player_name Player name to be selected
 * @apiParam {Number} deviceId The unique identifier of Device passed as url parameter i.e (61640FDC-B154-49E2-8F33-42DA5A420A40, 6BAFFC9901A47DA8)
 * @apiDescription Updates the media player on device, content will be played on the selected media player
 * @apiSuccessExample Success-Response:
 *     {
 *       "status_code": 200,
 *       "error_code": 1,
 *       "timestamp": 1,
 *       "error_description": "OK",
 *       "extra_data": "",
 *       "response_object": []
 *     }
 * 
 * @apiErrorExample Error-Response:
 *     {
 *       "status_code": 404,
 *       "error_code": -1,
 *       "timestamp": 1,
 *       "error_description": "E_NOT_FOUND",
 *       "extra_data": "The requested resource could not be found but may be available again in the future",
 *       "response_object": []
 *     }
 * 
 * @apiErrorExample Error-Response:
 *     {
 *       "status_code": 704,
 *       "error_code": -1,
 *       "timestamp": 1,
 *       "error_description": "DATABASE_ERROR",
 *       "extra_data": "Error connecting to database",
 *       "response_object": []
 *     }
 *
 */
exports.updateMediaPlayer = async (req, res) => {
  try {
    const getMessages = Joi.string().required();
    const { error, value } = getMessages.validate(req.body.player_name);
    if (error) {
      winston.error("Player name property is not correct: ", error.message);
      return response.send_res_get(req, res, [], 400, -1, 'BAD_REQUEST_DESCRIPTION', 'BAD_REQUEST_DATA', 'no-store');
    }

    const checkMediaPlayer =  await models.media_player.findOne({
      where: {
        player_name: value,
        app_id: req.auth_obj.appid,
        company_id: req.thisuser.company_id
      }
    });
    if (!checkMediaPlayer) {
      return response.send_res_get(req, res, [], 404, -1, 'NOT_FOUND_DESCRIPTION', 'NOT_FOUND_DATA', 'no-store');
    }

    const findDevice = await models.devices.findOne({
      where: {
        device_id: req.params.deviceId,
        company_id: req.thisuser.company_id
      }
    });
    if (!findDevice) {
      return response.send_res_get(req, res, [], 404, -1, 'NOT_FOUND_DESCRIPTION', 'NOT_FOUND_DATA', 'no-store');
    }

    await models.device_mediaplayer.upsert({
      device_id: findDevice.id,
      mediaplayer_id: checkMediaPlayer.id
    });

    response.send_res(req, res, [], 200, 1, 'OK_DESCRIPTION', 'OK_DATA', 'no-store');
  } catch (error) {
    winston.error("Updating the client's account information failed with error: ", error);
    response.send_res_get(req, res, [], 706, -1, 'DATABASE_ERROR_DESCRIPTION', 'DATABASE_ERROR_DATA', 'no-store');
  }
};