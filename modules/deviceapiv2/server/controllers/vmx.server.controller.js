'use strict'

const path = require('path');
const winston = require('winston');
const { models } = require('../../../../config/lib/sequelize');
const vmx = require('../../../vmx/lib/vmx');
const response = require(path.resolve('./config/responses'));

/**
 * @api {post} /apiv2/vmx/provision Provision Device
 * @apiVersion 0.2.0
 * @apiName ProvisionDevice
 * @apiGroup Verimatrix
 * @apiDescription Ensure that device is all setup to play verimatrix protected streams
 * @apiHeader {String} auth Auth string generated by the application.
 * @apiSuccessExample Success-Response:
 * HTTP/1.1 200 OK
 * {
 *    "status_code": 200,
 *    "error_code": 1,
 *    "timestamp": 1,
 *    "error_description": "OK",
 *    "extra_data": "OK_DATA",
 *    "response_object": {
 *       "vmx_player_id": "some verimatrix client id",
 *       "vmx_subscription_end": "2020-09-13T22:05:04.000Z"
 *    }
 * }
 * 
 * 
 * @apiErrorExample Error-Response:
 *  HTTP/1.1 200 OK
 *  {
 *     "status_code": 706,
 *     "error_code": -1,
 *     "timestamp": 1,
 *     "extra_data": "DATABASE_ERROR_DATA",
 *     "response_object": []
 *  }
 * 
 */
exports.handleVmxDeviceProvision = async function (req, res) {
    if (!req.body.vmx_player_id) {
        response.send_res_get(req, res, [], 400, -1, 'BAD_REQUEST_DESCRIPTION', 'BAD_REQUEST_DATA', 'no-store');
        return;
    }

    try {
        let device = await models.devices.findOne({
            attributes: ['id', 'device_id', 'vmx_id', 'vmx_player_id', 'vmx_subscription_id', 'vmx_subscription_end'],
            where: {
                device_id: req.authParams.token.boxid
            }
        });

        if (!device) {
            response.send_res(req, res, [], 706, -1, 'DATABASE_ERROR_DESCRIPTION', 'DATABASE_ERROR_DATA', 'no-store');
            return;
        }

        let vmxClient = vmx.getClient(req.thisuser.company_id);

        let deviceId = req.authParams.token.boxid;

        if (device.vmx_id) {
            let dataToUpdate = {};
            let shouldUpdate = false;

            //Get expiration remaining days
            /*let expiresIn = (device.vmx_subscription_end.getTime() - Date.now()) / 86400000;
            if (expiresIn < 2) {
                let startDate = new Date();
                startDate.setHours(startDate.getHours() - 2);

                let endDate = new Date(device.vmx_subscription_end.valueOf());
                endDate.setDate(endDate.getDate() + 30);

                let ent = {
                    'id': device.vmx_subscription_id,
                    "packageId": 'vmx-global-package',
                    "deviceId": device.vmx_id,
                    "startTime" : startDate.toISOString(),
                    "endTime" : endDate.toISOString(),
                }

                await vmxClient.upsertEntitlement(ent)

                dataToUpdate.vmx_subscription_end = endDate;
                shouldUpdate = true;
            }*/

            //See if vmx player id has changed
            if (device.vmx_player_id !== req.body.vmx_player_id) {
                let deviceType = getDeviceType(req.authParams.token.appid);

                let vmxDevice = {
                    'id': deviceId,
                    'deviceType': deviceType,
                    "networkType": "ITV",
                    "verimatrixClientId": req.body.vmx_player_id
                }

                await vmxClient.upsertDevice(vmxDevice);

                dataToUpdate.vmx_player_id = req.body.vmx_player_id;
                shouldUpdate = true;
            }

            if (shouldUpdate) {
                await device.update(dataToUpdate);
            }

            let respData = {
                vmx_player_id: !dataToUpdate.vmx_player_id ?  device.vmx_player_id : dataToUpdate.vmx_player_id,
                //vmx_subscription_end: !dataToUpdate.vmx_subscription_end ? device.vmx_subscription_end : dataToUpdate.vmx_subscription_end
            }

            response.send_res(req, res, respData, 200, 1, 'OK_DESCRIPTION', 'OK_DATA', 'no-store');
        }
        else {
            winston.info('Creating vmx device');
            //device should be created at vmx
            let deviceType = getDeviceType(req.authParams.token.appid);

            let vmxDevice = {
                'id': deviceId,
                'deviceType': deviceType,
                "networkType": "ITV",
                "verimatrixClientId": req.body.vmx_player_id
            }

            await vmxClient.upsertDevice(vmxDevice);

            /*let startDate = new Date();
            startDate.setHours(startDate.getHours() - 2);
            let endDate = new Date(startDate.valueOf());
            endDate.setDate(endDate.getDate() + 30);*/

            let entId = 'sub-device-' + deviceId
            let ent = {
                'id': entId,
                "packageId": 'vmx-global-package',
                "deviceId": deviceId,
                /*"startTime" : startDate.toISOString(),
                "endTime" : endDate.toISOString(),*/
            }

            await vmxClient.upsertEntitlement(ent)

            await device.update({
                vmx_id: deviceId,
                vmx_player_id: req.body.vmx_player_id,
                vmx_subscription_id: entId,
                //vmx_subscription_end: endDate
            });

            let respData = {
                vmx_player_id: req.body.vmx_player_id,
                //vmx_subscription_end: endDate
            }

            response.send_res(req, res, respData, 200, 1, 'OK_DESCRIPTION', 'OK_DATA', 'no-store');
        }
    }
    catch (err) {
        winston.error('Provisioning device failed with error:', err);
        response.send_res(req, res, [], 706, -1, 'DATABASE_ERROR_DESCRIPTION', 'DATABASE_ERROR_DATA', 'no-store');
    }
}

function getDeviceType(appId) {
    switch (appId) {
        case '1':
        case '6':
            return 'WEB_STB';
        case '2':
            return 'WEB_ANDROID';
        case '3':
            return 'WEB_IPHONE';
        case '4':
        case '5':
        case '7':
            return 'WEB_GATEWAY';
        case '8':
            return 'WEB_PC'
    }
}