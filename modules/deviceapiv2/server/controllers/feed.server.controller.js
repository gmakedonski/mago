'use strict'

var path = require('path'),
    winston = require('winston'),
    response = require(path.resolve('./config/responses')),
    carousels = require(path.resolve('./config/defaultvalues/carousels.json')),
    db = require(path.resolve('./config/lib/sequelize')),
    models = db.models,
    schedule = require('../../../../config/lib/scheduler');

const { Op } = require('sequelize');
const epgFn = require('../../../../custom_functions/epg')
var carouselMap = {};

const guestExcludedCarousel = [
    'feed_movies_paused',
    'feed_big_banners',
    'feed_small_banners'
];

const guestCarousels = [...carousels].filter(carousel => guestExcludedCarousel.indexOf(carousel.type) == -1);

/**
 * @api {get} /apiv3/feeds/carousels Get Carousels
 * @apiVersion 0.3.0
 * @apiName GetCarousel
 * @apiGroup FEEDS
 *
 * @apiDescription Get carousels for homepage
 * @apiHeader {String} auth Auth string generated by the application.
 * @apiSuccessExample Success-Response:
 *   HTTP/1.1 200 OK
 *     {
 *       "status_code": 200,
 *       "error_code": 1,
 *       "timestamp": 1,
 *       "error_description": "OK",
 *       "extra_data": "OK_DATA",
 *       "response_object": [
 *          {
 *            "type": "feed_tv_channels",
 *            "title": "TV Channels"
 *          },
 *          ...
 *       ]
 *     }
 *
 *
 * @apiErrorExample Error-Response:
 *  HTTP/1.1 200 OK
 *  {
 *     "status_code": 706,
 *     "error_code": -1,
 *     "timestamp": 1,
 *     "extra_data": "DATABASE_ERROR_DATA",
 *     "response_object": []
 *  }
 *
 */
exports.getCarousels = function(req, res) {
    let clientCarousels = [...carousels];

    //Filter paused movies of this user and do not send specific carousels.
    models.vod.findOne({
        include: [
            {
                model: models.vod_resume,
                required: true,
                attributes: [],
                where: {
                    login_id: req.thisuser.id,
                    resume_position: {
                        [Op.gt]: 0
                    },
                    percentage_position: {
                        [Op.lt]: 90
                    }
                }
            }
        ]
    }).then(function(movie) {
        if (!movie) {
            let carouselMeta = carouselMap['feed_movies_paused'];
            clientCarousels.splice(carouselMeta.index, 1);
        }

        response.send_res(req, res, clientCarousels, 200, 1, 'OK_DESCRIPTION', 'OK_DATA', 'private,max-age=86400');
    }).catch(function(err) {
        winston.error('Getting list of carousel failed with error: ', err);
        response.send_res(req, res, [], 706, -1, 'DATABASE_ERROR_DESCRIPTION', 'DATABASE_ERROR_DATA', 'no-store');
    });
}

/**
 * @api {get} /apiv3/feeds/tv/trending Get Trending Channels
 * @apiVersion 0.3.0
 * @apiName GetTrendingChannels
 * @apiGroup FEEDS
 *
 * @apiDescription Get trending channels for homepage
 * @apiHeader {String} auth Auth string generated by the application.
 * @apiSuccessExample Success-Response:
 *   HTTP/1.1 200 OK
 *     {
 *       "status_code": 200,
 *       "error_code": 1,
 *       "timestamp": 1,
 *       "error_description": "OK",
 *       "extra_data": "OK_DATA",
 *       "response_object": [
 *          {
 *            "id": 482,
 *            "channel_number": 12,
 *            "title": "Bang Bang",
 *            "epg_data": [
 *              {
 *                 "id": 7296697,
 *                 "title": "Ju Gi Oh",
 *                 "description": "Këto janë aventurat e Jugut, djaloshit të drojtur që zbuloi Enigmën e Mijëvjeçarit dhe fitoi energji magjike. 
 *                                Ai do të bashkohet me miqtë e tij për të parandaluar kthimin e Lojës së Hijeve.\r\n \r\n \r\n \r\n",
 *                 "program_start": "2020-06-24T13:05:00.000Z",
 *                 "program_end": "2020-06-24T13:50:00.000Z",
 *                 "icon_url": "/1/files/programContent/1592568259594littleCar.jpg"
 *              }
 *             ]
 *           },
 *          ...
 *       ]
 *     }
 *
 *
 * @apiErrorExample Error-Response:
 *  HTTP/1.1 200 OK
 *  {
 *     "status_code": 706,
 *     "error_code": -1,
 *     "timestamp": 1,
 *     "extra_data": "DATABASE_ERROR_DATA",
 *     "response_object": []
 *  }
 *
 */
exports.getTrendingChannels = function(req, res) {
    let companyId = (req.headers.company_id) ? req.headers.company_id : 1;

    models.carousel_channels.findOne({
        attributes: ['channel_id'],
        where: {company_id: companyId, carousel_type: 'feed_tv_trending'}
    }).then(function (channels) {
        if (!channels) {
            response.send_res(req, res, [], 200, 1, 'OK_DESCRIPTION', 'OK_DATA', 'no-store');
            return;
        }
        const channelNumberList = channels.dataValues.channel_id.toString().split(",")
        models.channels.findAll({
            attributes: ['id', 'channel_number', 'title'],
            where: {id: {[Op.in]: channelNumberList}, company_id: companyId},
            order: [['channel_number', 'ASC']]
        }).then(function (channels) {
            let ctx = {
                companyId,
                action: 'retrieve_current_epg',
                assetUrl: req.app.locals.backendsettings[companyId].assets_url,
                nearestEpgEnd: undefined
            }

            return getEpgForChannels(channels, ctx)
                .then(function (channels) {
                    if (!ctx.nearestEpgEnd) {
                        response.send_res(req, res, [], 200, 1, 'OK_DESCRIPTION', 'OK_DATA', 'no-store');
                        return;
                    }

                    let cacheExpire = Math.round((ctx.nearestEpgEnd.getTime() - Date.now()) / 1000);
                    response.send_res(req, res, channels, 200, 1, 'OK_DESCRIPTION', 'OK_DATA', 'private,max-age=' + cacheExpire);
                }).catch(function (err) {
                    winston.error('Getting list of next coming events failed with error: ', err);
                    response.send_res(req, res, [], 706, -1, 'DATABASE_ERROR_DESCRIPTION', 'DATABASE_ERROR_DATA', 'no-store');
                });
        });


    }).catch(function (err) {
        winston.error('Getting list of next coming events failed with error: ', err);
        response.send_res(req, res, [], 706, -1, 'DATABASE_ERROR_DESCRIPTION', 'DATABASE_ERROR_DATA', 'no-store');
    });
}


/**
 * @api {get} /apiv3/feeds/tv/coming Coming Next
 * @apiVersion 0.3.0
 * @apiName ComingNext
 * @apiGroup FEEDS
 *
 * @apiDescription Get coming tv program for homepage
 * @apiHeader {String} auth Auth string generated by the application.
 * @apiSuccessExample Success-Response:
 *   HTTP/1.1 200 OK
 *     {
 *       "status_code": 200,
 *       "error_code": 1,
 *       "timestamp": 1,
 *       "error_description": "OK",
 *       "extra_data": "OK_DATA",
 *       "response_object": [
 *          {
 *             "id": 465,
 *             "channel_number": 5,
 *             "title": "Klan HD",
 *             "epg_data": [
 *                 {
 *                     "id": 7298321,
 *                     "title": "LAJME & MOTI",
 *                     "description": "LAJME & MOTI",
 *                     "program_start": "2020-06-24T13:30:00.000Z",
 *                     "program_end": "2020-06-24T14:05:00.000Z",
 *                     "icon_url": "",
 *                 }
 *              ]
 *          },
 *          ...
 *       ]
 *     }
 *
 *
 * @apiErrorExample Error-Response:
 *  HTTP/1.1 200 OK
 *  {
 *     "status_code": 706,
 *     "error_code": -1,
 *     "timestamp": 1,
 *     "extra_data": "DATABASE_ERROR_DATA",
 *     "response_object": []
 *  }
 *
 */
exports.getComingEpg = function (req, res) {
    let companyId = (req.headers.company_id) ? req.headers.company_id : 1;
    models.carousel_channels.findOne({
        attributes: ['channel_id'],
        where: {company_id: companyId, carousel_type: 'feed_tv_schedulable'}
    }).then(function (channels) {
        if (!channels) {
            response.send_res(req, res, [], 200, 1, 'OK_DESCRIPTION', 'OK_DATA', 'no-store');
            return;
        }
        const channelNumberList = channels.dataValues.channel_id.toString().split(",")
        models.channels.findAll({
            attributes: ['id', 'channel_number', 'title'],
            where: {id: {[Op.in]: channelNumberList}, company_id: companyId},
            order: [['channel_number', 'ASC']]
        }).then(function (channels) {
            let ctx = {
                companyId,
                action: 'retrieve_next_epg',
                assetUrl: req.app.locals.backendsettings[companyId].assets_url,
                nearestEpgEnd: undefined
            }

            return getEpgForChannels(channels, ctx)
                .then(function (channels) {
                    if (!ctx.nearestEpgEnd) {
                        response.send_res(req, res, [], 200, 1, 'OK_DESCRIPTION', 'OK_DATA', 'no-store');
                        return;
                    }

                    let cacheExpire = Math.round((ctx.nearestEpgEnd.getTime() - Date.now()) / 1000);
                    response.send_res(req, res, channels, 200, 1, 'OK_DESCRIPTION', 'OK_DATA', 'private,max-age=' + cacheExpire);
                }).catch(function (err) {
                    winston.error('Getting list of next coming events failed with error: ', err);
                    response.send_res(req, res, [], 706, -1, 'DATABASE_ERROR_DESCRIPTION', 'DATABASE_ERROR_DATA', 'no-store');
                });
        });

    }).catch(function (err) {
        winston.error('Getting list of next coming events failed with error: ', err);
        response.send_res(req, res, [], 706, -1, 'DATABASE_ERROR_DESCRIPTION', 'DATABASE_ERROR_DATA', 'no-store');
    });
}

/**
 * @api {get} /apiv3/feeds/tv/channels Get Channels
 * @apiVersion 0.3.0
 * @apiName GetChannels
 * @apiGroup FEEDS
 *
 * @apiDescription Get channels for homepage
 * @apiHeader {String} auth Auth string generated by the application.
 * @apiSuccessExample Success-Response:
 *   HTTP/1.1 200 OK
 *     {
 *       "status_code": 200,
 *       "error_code": 1,
 *       "timestamp": 1,
 *       "error_description": "OK",
 *       "extra_data": "OK_DATA",
 *       "response_object": [
 *          {
 *            "id": 957,
 *            "title": "Info Channel",
 *            "channel_number": 1,
 *            "icon_url": "https://beta-backoffice.tibo.tv/files/channel_img/Info_Channel.png"
 *          },
 *          ...
 *       ]
 *     }
 *
 *
 * @apiErrorExample Error-Response:
 *  HTTP/1.1 200 OK
 *  {
 *     "status_code": 706,
 *     "error_code": -1,
 *     "timestamp": 1,
 *     "extra_data": "DATABASE_ERROR_DATA",
 *     "response_object": []
 *  }
 *
 */
exports.getFeedChannels = function(req, res) {
    let channelFilter = {
        company_id: req.thisuser.company_id,
        isavailable: 1
    };

    if(req.thisuser.show_adult == 0) {
        channelFilter.pin_protected = 0;
    }

    let streamFilter = {};
    streamFilter.stream_source_id = req.thisuser.channel_stream_source_id; // streams come from the user's stream source
    streamFilter.stream_mode = 'live'; //filter streams based on device resolution
    streamFilter.stream_resolution = {[Op.like]: "%"+req.auth_obj.appid+"%"};

    models.package.findAll({
        attributes: ['id'],
        where: {package_type_id: req.auth_obj.screensize},
        include:[
            {model: models.subscription,
                required: true,
                attributes: [],
                where: {login_id: req.thisuser.id, end_date: {[Op.gte]: Date.now()}}
            }
        ]
    }).then(function(packagesWithSubscription) {
        let packages = [];
        for (let i = 0; i < packagesWithSubscription.length; i++) {
            packages.push(packagesWithSubscription[i].id);
        }

        let packageWhere = {};
        if (packages.length > 0) {
            packageWhere.package_id = {
                [Op.in]: packages
            }
        }

        return models.channels.findAll({
            raw:true,
            attributes: ['id', 'title', 'channel_number', [db.sequelize.fn('concat', req.app.locals.backendsettings[req.thisuser.company_id].assets_url, db.sequelize.col('channels.icon_url')), 'icon_url']],
            where: channelFilter,
            include: [
                {
                    model: models.packages_channels,
                    required: true,
                    attributes:[],
                    where: packageWhere
                }
            ],
            group: ['id'],
            order: [[ 'channel_number', 'ASC' ]],
            limit: 20,
            subQuery: false,
        }).then(function(channels) {
            response.send_res(req, res, channels, 200, 1, 'OK_DESCRIPTION', 'OK_DATA', 'private,max-age=86400');
        }).catch(function(err) {
            winston.error('Getting list of customer chanel failed with error: ' + err);
            response.send_res(req, res, [], 706, -1, 'DATABASE_ERROR_DESCRIPTION', 'DATABASE_ERROR_DATA', 'no-store');
        });
    }).catch(function(err) {
        winston.error('Getting list of subscribed packages failed with error: ' + err);
        response.send_res(req, res, [], 706, -1, 'DATABASE_ERROR_DESCRIPTION', 'DATABASE_ERROR_DATA', 'no-store');
    });
}


/**
 * @api {get} /apiv3/feeds/movies Get Movies
 * @apiVersion 0.3.0
 * @apiName GetMovies
 * @apiGroup FEEDS
 *
 * @apiDescription Get movie list on homepage
 * @apiHeader {String} auth Auth string generated by the application.
 * @apiSuccessExample Success-Response:
 *   HTTP/1.1 200 OK
 *     {
 *       "status_code": 200,
 *       "error_code": 1,
 *       "timestamp": 1,
 *       "error_description": "OK",
 *       "extra_data": "OK_DATA",
 *       "response_object": [
 *          {
 *            "id": 799,
 *            "title": "John Wick",
 *            "poster_path": "https://beta-backoffice.tibo.tv/files/vod/John_Wick.jpg"
 *          },
 *          ...
 *       ]
 *     }
 *
 *
 * @apiErrorExample Error-Response:
 *  HTTP/1.1 200 OK
 *  {
 *     "status_code": 706,
 *     "error_code": -1,
 *     "timestamp": 1,
 *     "extra_data": "DATABASE_ERROR_DATA",
 *     "response_object": []
 *  }
 *
 */
exports.getFeedMovies = function(req, res) {
    models.package.findAll({
        attributes: ['id'],
        where: {package_type_id: req.auth_obj.screensize + 2},
        include: [{
            model: models.subscription,
            required: true,
            attributes: ['id'],
            where: {login_id: req.thisuser.id, end_date: {[Op.gte]: Date.now()}}
        }]
    }).then(function(subscribedPackages) {
        let packages = [];

        for (let i = 0; i < subscribedPackages.length; i++) {
            packages.push(subscribedPackages[i].id);
        }

        let packageWhere = {};
        if (packages.length > 0) {
            packageWhere.package_id = {
                [Op.in]: packages
            }
        }

        let options = {
            attributes: ['id', 'title', [db.sequelize.fn("concat", req.app.locals.backendsettings[req.thisuser.company_id].assets_url, db.sequelize.col('vod.icon_url')), 'poster_path']],
            where: {
                adult_content: false
            },
            include: [
                {
                    model: models.package_vod,
                    required: true,
                    attributes: [],
                    where: packageWhere
                }
            ],
            order: [['clicks', 'DESC']],
            limit: 15,
            subQuery: false
        }

        return models.vod.findAll(options)
            .then(function(vods) {
                response.send_res(req, res, vods, 200, 1, 'OK_DESCRIPTION', 'OK_DATA', 'private,max-age=86400');
            }).catch(function(err) {
                winston.error('Getting list of vod failed with error: ', err);
                response.send_res(req, res, [], 706, -1, 'DATABASE_ERROR_DESCRIPTION', 'DATABASE_ERROR_DATA', 'no-store');
            });
    }).catch(function(err) {
        winston.error('Getting list of subscribed packages failed with error: ', err);
        response.send_res(req, res, [], 706, -1, 'DATABASE_ERROR_DESCRIPTION', 'DATABASE_ERROR_DATA', 'no-store');
    });
}

/**
 * @api {get} /apiv3/feeds/shows Get Tv Shows
 * @apiVersion 0.3.0
 * @apiName GetTvShows
 * @apiGroup FEEDS
 *
 * @apiDescription Get tv shows of guest on homepage
 * @apiHeader {String} auth Auth string generated by the application.
 * @apiSuccessExample Success-Response:
 *   HTTP/1.1 200 OK
 *     {
 *       "status_code": 200,
 *       "error_code": 1,
 *       "timestamp": 1,
 *       "error_description": "OK",
 *       "extra_data": "OK_DATA",
 *       "response_object": [
 *          "id": 1,
 *          "title": "Sherlock Holmes",
 *          "poster_path": "https://beta-backoffice.tibo.tv/files/vod/herlockicons01.jpg",
 *          "tv_seasons": [
 *              {
 *                  "id": 1,
 *                  "season_number": 1,
 *                  "title": "Sherlock Holmes - season 1"
 *              },
 *              {
 *                  "id": 2,
 *                  "season_number": 2,
 *                  "title": "Sherlock Holmes - season 2"
 *              }
 *          ]
 *          ...
 *       ]
 *     }
 *
 *
 * @apiErrorExample Error-Response:
 *  HTTP/1.1 200 OK
 *  {
 *     "status_code": 706,
 *     "error_code": -1,
 *     "timestamp": 1,
 *     "extra_data": "DATABASE_ERROR_DATA",
 *     "response_object": []
 *  }
 *
 */
exports.getFeedShows = function(req, res) {
    models.tv_series_packages.findAll({
        include: [
            {
                model: models.package,
                required: true,
                attributes: [],
                where: {package_type_id: req.auth_obj.screensize + 2},
                include: [{
                    model: models.subscription,
                    required: true,
                    attributes: [],
                    where: {login_id: req.thisuser.id, end_date: {[Op.gte]: Date.now()}}
                }]
            }
        ]
    }).then(function(subscribedPackages) {
        let packages = [];
        for (let i = 0; i < subscribedPackages.length; i++) {
            packages.push(subscribedPackages[i].package_id);
        }

        let packageWhere = {};
        if (packages.length > 0) {
            packageWhere.package_id =  {
                [Op.in]: packages
            }
        }

        let options = {
            attributes : ['id', 'title', [db.sequelize.fn("concat", req.app.locals.backendsettings[req.thisuser.company_id].assets_url, db.sequelize.col('tv_series.icon_url')), 'poster_path']],
            where: {
                company_id: req.thisuser.company_id,
                expiration_time: {
                    [Op.gte]: Date.now()
                }
            },
            include: [
                {
                    model: models.tv_season,
                    attributes: ['id', 'season_number', 'title'],
                    required: false,
                    where: {expiration_time: {[Op.gte]: Date.now()}, is_available: true}
                },
                {
                    model: models.tv_series_packages,
                    required: true,
                    attributes: [],
                    where: packageWhere
                }
            ],
            limit: 15,
            order: ['id'],
            subQuery: false
        }

        return models.tv_series.findAll(options)
            .then(function(tvSeries) {
                response.send_res(req, res, tvSeries, 200, 1, 'OK_DESCRIPTION', 'OK_DATA', 'private,max-age=86400');
            }).catch(function(err) {
                winston.error('Getting list of series failed with error: ', err);
                response.send_res(req, res, [], 706, -1, 'DATABASE_ERROR_DESCRIPTION', 'DATABASE_ERROR_DATA', 'no-store');
            })
    }).catch(function(err) {
        winston.error('Getting list of subscribed packages failed with error: ', err);
        response.send_res(req, res, [], 706, -1, 'DATABASE_ERROR_DESCRIPTION', 'DATABASE_ERROR_DATA', 'no-store');
    });
}

/**
 * @api {get} /apiv3/feeds/movies/new Get New Movie Releases
 * @apiVersion 0.3.0
 * @apiName GetNewMovieReleases
 * @apiGroup FEEDS
 *
 * @apiDescription Get new movie release for homepage
 * @apiHeader {String} auth Auth string generated by the application.
 * @apiSuccessExample Success-Response:
 *   HTTP/1.1 200 OK
 *     {
 *       "status_code": 200,
 *       "error_code": 1,
 *       "timestamp": 1,
 *       "error_description": "OK",
 *       "extra_data": "OK_DATA",
 *       "response_object": [
 *          "id": 1,
 *          "title": "Sherlock Holmes",
 *          "poster_path": "https://beta-backoffice.tibo.tv/files/vod/herlockicons01.jpg",
 *          "tv_seasons": [
 *              {
 *                  "id": 1,
 *                  "season_number": 1,
 *                  "title": "Sherlock Holmes - season 1"
 *              },
 *              {
 *                  "id": 2,
 *                  "season_number": 2,
 *                  "title": "Sherlock Holmes - season 2"
 *              }
 *          ]
 *          ...
 *       ]
 *     }
 *
 *
 * @apiErrorExample Error-Response:
 *  HTTP/1.1 200 OK
 *  {
 *     "status_code": 706,
 *     "error_code": -1,
 *     "timestamp": 1,
 *     "extra_data": "DATABASE_ERROR_DATA",
 *     "response_object": []
 *  }
 *
 */
exports.getNewArrivals = function(req, res) {
    models.package.findAll({
        attributes: ['id'],
        where: {package_type_id: req.auth_obj.screensize + 2},
        include: [{
            model: models.subscription,
            required: true,
            attributes: ['id'],
            where: {login_id: req.thisuser.id, end_date: {[Op.gte]: Date.now()}}
        }]
    }).then(function(subscribedPackages) {
        let packages = [];

        for (let i = 0; i < subscribedPackages.length; i++) {
            packages.push(subscribedPackages[i].id);
        }

        let packageWhere = {};
        if (packages.length > 0) {
            packageWhere.package_id = {
                [Op.in]: packages
            }
        }

        let options = {
            attributes: ['id', 'title', 'release_date', [db.sequelize.fn("concat", req.app.locals.backendsettings[req.thisuser.company_id].assets_url, db.sequelize.col('vod.image_url')), 'backdrop_path'],
            [db.sequelize.literal('(SELECT IFNULL((SELECT favorite FROM vod_resume WHERE login_id=' + req.thisuser.id + ' AND vod_id=vod.id), 0) AS "icon_url")'), 'watched']],
            where: {
                adult_content: false
            },
            include: [
                {
                    model: models.package_vod,
                    required: true,
                    attributes: [],
                    where: packageWhere
                }
            ],
            order: [['createdAt', 'DESC']],
            limit: 10,
            subQuery: false
        }

        return models.vod.findAll(options)
            .then(function(vods) {
                response.send_res(req, res, vods, 200, 1, 'OK_DESCRIPTION', 'OK_DATA', 'no-store');
            }).catch(function(err) {
                winston.error('Getting list of vod failed with error: ', err);
                response.send_res(req, res, [], 706, -1, 'DATABASE_ERROR_DESCRIPTION', 'DATABASE_ERROR_DATA', 'no-store');
            });
    }).catch(function(err) {
        winston.error('Getting list of subscribed packages failed with error: ', err);
        response.send_res(req, res, [], 706, -1, 'DATABASE_ERROR_DESCRIPTION', 'DATABASE_ERROR_DATA', 'no-store');
    });
}


/**
 * @api {get} /apiv3/feeds/movies/paused Continue Watching
 * @apiVersion 0.3.0
 * @apiName ContinueWatching
 * @apiGroup FEEDS
 *
 * @apiDescription Get new paused movies and continu watching for homepage
 * @apiHeader {String} auth Auth string generated by the application.
 * @apiSuccessExample Success-Response:
 *   HTTP/1.1 200 OK
 *     {
 *       "status_code": 200,
 *       "error_code": 1,
 *       "timestamp": 1,
 *       "error_description": "OK",
 *       "extra_data": "OK_DATA",
 *       "response_object": [
 *          {
 *           "id": 2695,
 *           "title": "Endless Love",
 *           "backdrop_path": "https://beta-backoffice.tibo.tv/files/vod/Endless_Love_Image.jpg",
 *           "resume_position": 18,
 *           "percentage_position": 0
 *          },
 *          ...
 *       ]
 *     }
 *
 *
 * @apiErrorExample Error-Response:
 *  HTTP/1.1 200 OK
 *  {
 *     "status_code": 706,
 *     "error_code": -1,
 *     "timestamp": 1,
 *     "extra_data": "DATABASE_ERROR_DATA",
 *     "response_object": []
 *  }
 *
 */
exports.getFeedPausedMovies = function(req, res) {
    models.package.findAll({
        attributes: ['id'],
        where: {package_type_id: req.auth_obj.screensize + 2},
        include: [{
            model: models.subscription,
            required: true,
            attributes: ['id'],
            where: {login_id: req.thisuser.id, end_date: {[Op.gte]: Date.now()}}
        }]
    }).then(function(subscribedPackages) {
        let packages = [];

        for (let i = 0; i < subscribedPackages.length; i++) {
            packages.push(subscribedPackages[i].id);
        }

        let packageWhere = {};
        if (packages.length > 0) {
            packageWhere.package_id = {
                [Op.in]: packages
            }
        }

        let options = {
            attributes: ['id', 'title', [db.sequelize.fn("concat", req.app.locals.backendsettings[req.thisuser.company_id].assets_url, db.sequelize.col('vod.image_url')), 'backdrop_path'], [db.sequelize.col('vod_resumes.resume_position'), 'resume_position'], [db.sequelize.col('vod_resumes.percentage_position'), 'percentage_position']],
            where: {
                adult_content: false
            },
            include: [
                {
                    model: models.package_vod,
                    required: true,
                    attributes: [],
                    where: packageWhere
                },
                {
                    model: models.vod_resume,
                    required: true,
                    attributes: [],
                    where: {
                        login_id: req.thisuser.id,
                        resume_position: {
                            [Op.gt]: 0
                        },
                        percentage_position: {
                            [Op.and]: [
                                {[Op.gt]: 0},
                                {[Op.lte]: 90}
                            ]
                        }
                    }
                }
            ],
            order: db.sequelize.literal('vod_resumes.updatedAt DESC'),
            limit: 10,
            subQuery: false
        }

        return models.vod.findAll(options)
            .then(function(vods) {
                response.send_res(req, res, vods, 200, 1, 'OK_DESCRIPTION', 'OK_DATA', 'no-store');
            }).catch(function(err) {
                winston.error('Getting list of vod failed with error: ', err);
                response.send_res(req, res, [], 706, -1, 'DATABASE_ERROR_DESCRIPTION', 'DATABASE_ERROR_DATA', 'no-store');
            });
    }).catch(function(err) {
        winston.error('Getting list of subscribed packages failed with error: ', err);
        response.send_res(req, res, [], 706, -1, 'DATABASE_ERROR_DESCRIPTION', 'DATABASE_ERROR_DATA', 'no-store');
    });
}

function getEpgForChannels(channels, ctx) {
    let promiseArr = [];
    let channelArr = [];

    for (let i = 0; i < channels.length; i++) {
        let channel = channels[i].toJSON();
        channelArr.push(channel);
        promiseArr.push(getEpgForChannel(ctx, channelArr, channel));
    }

    return Promise.all(promiseArr)
        .then(function() {
            /*channelArr = channelArr.sort((a, b) => {
                if (a.channel_number < b.channel_number) {
                    return -1;
                }
                
                if (a.channel_number > b.channel_number) {
                    return 1;
                }

                return 0;
            });*/
            return channelArr;
        });
}

function getEpgForChannel(ctx, channelArr, channel) {
    return new Promise(async function(resolve, reject) {
        try {
            let epgs = await (await epgFn.getOsdEpg(channel.channel_number, ctx.companyId, ctx.assetUrl)).epgs;
            let channelEpgs = [];

            if (epgs.length > 0) {
                if (ctx.action == 'retrieve_current_epg') {
                    let programStart = new Date(epgs[0].program_start);
                    if (programStart.getTime() < Date.now()) {
                        channelEpgs.push({
                            id: epgs[0].id,
                            title: epgs[0].title,
                            description: epgs[0].long_description,
                            program_start: epgs[0].program_start,
                            program_end: epgs[0].program_end,
                            icon_url: epgs[0].dataValues ? epgs[0].dataValues.icon_url : epgs[0].icon_url
                        });

                        if (ctx) {
                            let programEnd = new Date(channelEpgs[0].program_end);
                            if (!ctx.nearestEpgEnd) {
                                ctx.nearestEpgEnd = programEnd;
                            }
                            else if (programEnd.getTime() < ctx.nearestEpgEnd.getTime()) {
                                ctx.nearestEpgEnd = programEnd;
                            }
                        }
                    }
                }
                else if (ctx.action == 'retrieve_next_epg') {
                    let index = epgs.length - 1;
                    let programStart = new Date(epgs[index].program_start);
                    if (programStart.getTime() > Date.now()) {
                        channelEpgs.push({
                            id: epgs[index].id,
                            title: epgs[index].title,
                            description: epgs[index].long_description,
                            program_start: epgs[index].program_start,
                            program_end: epgs[index].program_end,
                            icon_url: epgs[index].dataValues ? epgs[index].dataValues.icon_url : epgs[index].icon_url
                        });

                        if (ctx) {
                            let programStart = new Date(channelEpgs[0].program_start);
                            if (!ctx.nearestEpgEnd) {
                                ctx.nearestEpgEnd = programStart;
                            }
                            else if (programStart.getTime() < ctx.nearestEpgEnd.getTime()) {
                                ctx.nearestEpgEnd = programStart;
                            }
                        }
                    }
                }
                else {
                    throw new Error('Invaling action in context');
                }
            }

            if (channelEpgs.length > 0) {
                channel.epg_data = channelEpgs;
            }
            else {
                let index = channelArr.indexOf(channel);
                if (index > -1) {
                    channelArr.splice(index, 1);
                }
            }

            resolve();
        }
        catch(err) {
            reject(err);
        }
    });
}

function indexCarouselByType() {
    for (let i = 0; i < carousels.length; i++) {
        let carousel = carousels[i];
        carouselMap[carousel.type] = {
            index: i,
            carousel
        };
    }
}

indexCarouselByType();


                                            /***************************
                                             **      GUEST APIs        *
                                             ***************************/

/**
 * @api {get} /apiv3/guest/feeds/carousels Get Carousels Guest
 * @apiVersion 0.3.0
 * @apiName GetCarouselGuest
 * @apiGroup FEEDS
 *
 * @apiDescription Get carousels for homepage
 *
 * @apiSuccessExample Success-Response:
 *   HTTP/1.1 200 OK
 *     {
 *       "status_code": 200,
 *       "error_code": 1,
 *       "timestamp": 1,
 *       "error_description": "OK",
 *       "extra_data": "OK_DATA",
 *       "response_object": [
 *          {
 *            "type": "feed_tv_channels",
 *            "title": "TV Channels"
 *          },
 *          ...
 *       ]
 *     }
 *
 *
 * @apiErrorExample Error-Response:
 *  HTTP/1.1 200 OK
 *  {
 *     "status_code": 706,
 *     "error_code": -1,
 *     "timestamp": 1,
 *     "extra_data": "DATABASE_ERROR_DATA",
 *     "response_object": []
 *  }
 *
 */
exports.getCarouselsGuest = function (req, res) {
  try {
    response.send_res(req, res, guestCarousels, 200, 1, 'OK_DESCRIPTION', 'OK_DATA', 'private,max-age=86400');
  } catch (error) {
    winston.error('Getting list of carousel failed with error: ', err);
    response.send_res(req, res, [], 706, -1, 'DATABASE_ERROR_DESCRIPTION', 'DATABASE_ERROR_DATA', 'no-store');
  }
}


/**
 * @api {get} /apiv3/guest/feeds/tv/trending Get Trending ChannelsGuest
 * @apiVersion 0.3.0
 * @apiName GetTrendingChannelsGuest
 * @apiGroup FEEDS
 *
 * @apiDescription Get trending channels for homepage
 *
 * @apiSuccessExample Success-Response:
 *   HTTP/1.1 200 OK
 *     {
 *       "status_code": 200,
 *       "error_code": 1,
 *       "timestamp": 1,
 *       "error_description": "OK",
 *       "extra_data": "OK_DATA",
 *       "response_object": [
 *          {
 *            "id": 482,
 *            "channel_number": 12,
 *            "title": "Bang Bang",
 *            "epg_data": [
 *              {
 *                 "id": 7296697,
 *                 "title": "Ju Gi Oh",
 *                 "description": "Këto janë aventurat e Jugut, djaloshit të drojtur që zbuloi Enigmën e Mijëvjeçarit dhe fitoi energji magjike. 
 *                                Ai do të bashkohet me miqtë e tij për të parandaluar kthimin e Lojës së Hijeve.\r\n \r\n \r\n \r\n",
 *                 "program_start": "2020-06-24T13:05:00.000Z",
 *                 "program_end": "2020-06-24T13:50:00.000Z",
 *                 "icon_url": "/1/files/programContent/1592568259594littleCar.jpg"
 *              }
 *             ]
 *           },
 *          ...
 *       ]
 *     }
 *
 *
 * @apiErrorExample Error-Response:
 *  HTTP/1.1 200 OK
 *  {
 *     "status_code": 706,
 *     "error_code": -1,
 *     "timestamp": 1,
 *     "extra_data": "DATABASE_ERROR_DATA",
 *     "response_object": []
 *  }
 *
 */
exports.getTrendingChannelsGuest = function (req, res) {
    let companyId = (req.headers.company_id) ? req.headers.company_id : 1;

    models.carousel_channels.findOne({
        attributes: ['channel_id'],
        where: {company_id: companyId, carousel_type: 'feed_tv_trending'}
    }).then(function (channels) {
        if (!channels) {
            response.send_res(req, res, [], 200, 1, 'OK_DESCRIPTION', 'OK_DATA', 'no-store');
            return;
        }
        const channelNumberList = channels.dataValues.channel_id.toString().split(",")
        models.channels.findAll({
            attributes: ['id', 'channel_number', 'title'],
            where: {id: {[Op.in]: channelNumberList}, company_id: companyId},
            order: [['channel_number', 'ASC']]
        }).then(function (channels) {
            let ctx = {
                companyId,
                action: 'retrieve_current_epg',
                assetUrl: req.app.locals.backendsettings[companyId].assets_url,
                nearestEpgEnd: undefined
            }

            return getEpgForChannels(channels, ctx)
                .then(function (channels) {
                    if (!ctx.nearestEpgEnd) {
                        response.send_res(req, res, [], 200, 1, 'OK_DESCRIPTION', 'OK_DATA', 'no-store');
                        return;
                    }

                    let cacheExpire = Math.round((ctx.nearestEpgEnd.getTime() - Date.now()) / 1000);
                    response.send_res(req, res, channels, 200, 1, 'OK_DESCRIPTION', 'OK_DATA', 'private,max-age=' + cacheExpire);
                }).catch(function (err) {
                    winston.error('Getting list of next coming events failed with error: ', err);
                    response.send_res(req, res, [], 706, -1, 'DATABASE_ERROR_DESCRIPTION', 'DATABASE_ERROR_DATA', 'no-store');
                });
        });

    }).catch(function (err) {
        winston.error('Getting list of next coming events failed with error: ', err);
        response.send_res(req, res, [], 706, -1, 'DATABASE_ERROR_DESCRIPTION', 'DATABASE_ERROR_DATA', 'no-store');
    });

}


/**
 * @api {get} /apiv3/guest/feeds/tv/coming Coming Next Guest
 * @apiVersion 0.3.0
 * @apiName ComingNextGuest
 * @apiGroup FEEDS
 *
 * @apiDescription Get coming tv program for homepage
 *
 * @apiSuccessExample Success-Response:
 *   HTTP/1.1 200 OK
 *     {
 *       "status_code": 200,
 *       "error_code": 1,
 *       "timestamp": 1,
 *       "error_description": "OK",
 *       "extra_data": "OK_DATA",
 *       "response_object": [
 *          {
 *             "id": 465,
 *             "channel_number": 5,
 *             "title": "Klan HD",
 *             "epg_data": [
 *                 {
 *                     "id": 7298321,
 *                     "title": "LAJME & MOTI",
 *                     "description": "LAJME & MOTI",
 *                     "program_start": "2020-06-24T13:30:00.000Z",
 *                     "program_end": "2020-06-24T14:05:00.000Z",
 *                     "icon_url": "",
 *                 }
 *              ]
 *          },
 *          ...
 *       ]
 *     }
 *
 *
 * @apiErrorExample Error-Response:
 *  HTTP/1.1 200 OK
 *  {
 *     "status_code": 706,
 *     "error_code": -1,
 *     "timestamp": 1,
 *     "extra_data": "DATABASE_ERROR_DATA",
 *     "response_object": []
 *  }
 *
 */
exports.getComingEpgGuest = function (req, res) {
    let companyId = (req.headers.company_id) ? req.headers.company_id : 1;

    models.carousel_channels.findOne({
        attributes: ['channel_id'],
        where: {company_id: companyId, carousel_type: 'feed_tv_schedulable'}
    }).then(function (channels) {
        if (!channels) {
            response.send_res(req, res, [], 200, 1, 'OK_DESCRIPTION', 'OK_DATA', 'no-store');
            return;
        }
        const channelNumberList = channels.dataValues.channel_id.toString().split(",")
        models.channels.findAll({
            attributes: ['id', 'channel_number', 'title'],
            where: {id: {[Op.in]: channelNumberList}, company_id: companyId},
            order: [['channel_number', 'ASC']]
        }).then(function (channels) {
            let ctx = {
                companyId,
                action: 'retrieve_next_epg',
                assetUrl: req.app.locals.backendsettings[companyId].assets_url,
                nearestEpgEnd: undefined
            }

            return getEpgForChannels(channels, ctx)
                .then(function (channels) {
                    if (!ctx.nearestEpgEnd) {
                        response.send_res(req, res, [], 200, 1, 'OK_DESCRIPTION', 'OK_DATA', 'no-store');
                        return;
                    }

                    let cacheExpire = Math.round((ctx.nearestEpgEnd.getTime() - Date.now()) / 1000);
                    response.send_res(req, res, channels, 200, 1, 'OK_DESCRIPTION', 'OK_DATA', 'private,max-age=' + cacheExpire);
                }).catch(function (err) {
                    winston.error('Getting list of next coming events failed with error: ', err);
                    response.send_res(req, res, [], 706, -1, 'DATABASE_ERROR_DESCRIPTION', 'DATABASE_ERROR_DATA', 'no-store');
                });
        });

    }).catch(function (err) {
        winston.error('Getting list of next coming events failed with error: ', err);
        response.send_res(req, res, [], 706, -1, 'DATABASE_ERROR_DESCRIPTION', 'DATABASE_ERROR_DATA', 'no-store');
    });

}


/**
 * @api {get} /apiv3/guest/feeds/tv/channels Get Channels Guest
 * @apiVersion 0.3.0
 * @apiName GetChannelsGuest
 * @apiGroup FEEDS
 *
 * @apiDescription Get channels for homepage
 *
 * @apiSuccessExample Success-Response:
 *   HTTP/1.1 200 OK
 *     {
 *       "status_code": 200,
 *       "error_code": 1,
 *       "timestamp": 1,
 *       "error_description": "OK",
 *       "extra_data": "OK_DATA",
 *       "response_object": [
 *          {
 *            "id": 957,
 *            "title": "Info Channel",
 *            "channel_number": 1,
 *            "icon_url": "https://beta-backoffice.tibo.tv/files/channel_img/Info_Channel.png"
 *          },
 *          ...
 *       ]
 *     }
 *
 *
 * @apiErrorExample Error-Response:
 *  HTTP/1.1 200 OK
 *  {
 *     "status_code": 706,
 *     "error_code": -1,
 *     "timestamp": 1,
 *     "extra_data": "DATABASE_ERROR_DATA",
 *     "response_object": []
 *  }
 *
 */
exports.getFeedChannelsGuest = function (req, res) {
  let companyId = req.headers.company_id ? req.headers.company_id : 1
  let channelFilter = {
    company_id: companyId,
    isavailable: 1,
    pin_protected: 0
  };

  return models.channels.findAll({
    //raw: true,
    attributes: ['id', 'title', 'channel_number', [db.sequelize.fn('concat', req.app.locals.backendsettings[companyId].assets_url, db.sequelize.col('channels.icon_url')), 'icon_url']],
    where: channelFilter,
    order: [['channel_number', 'ASC']],
    limit: 20
  }).then(channels => {
    response.send_res(req, res, channels, 200, 1, 'OK_DESCRIPTION', 'OK_DATA', 'private,max-age=86400');
  }).catch(err => {
    winston.error('Getting list of customer chanel failed with error: ', err);
    response.send_res(req, res, [], 706, -1, 'DATABASE_ERROR_DESCRIPTION', 'DATABASE_ERROR_DATA', 'no-store');
  });
}


/**
 * @api {get} /apiv3/guest/feeds/tv/channels Get Movies Guest
 * @apiVersion 0.3.0
 * @apiName GetMoviesGuest
 * @apiGroup FEEDS
 *
 * @apiDescription Get movie list of guest on homepage
 *
 * @apiSuccessExample Success-Response:
 *   HTTP/1.1 200 OK
 *     {
 *       "status_code": 200,
 *       "error_code": 1,
 *       "timestamp": 1,
 *       "error_description": "OK",
 *       "extra_data": "OK_DATA",
 *       "response_object": [
 *          {
 *            "id": 799,
 *            "title": "John Wick",
 *            "poster_path": "https://beta-backoffice.tibo.tv/files/vod/John_Wick.jpg"
 *          },
 *          ...
 *       ]
 *     }
 *
 *
 * @apiErrorExample Error-Response:
 *  HTTP/1.1 200 OK
 *  {
 *     "status_code": 706,
 *     "error_code": -1,
 *     "timestamp": 1,
 *     "extra_data": "DATABASE_ERROR_DATA",
 *     "response_object": []
 *  }
 *
 */
exports.getFeedMoviesGuest = function (req, res) {
  let companyId = req.headers.company_id ? req.headers.company_id : 1

  models.vod.findAll({
    attributes: ['id', 'title', [db.sequelize.fn("concat", req.app.locals.backendsettings[companyId].assets_url, db.sequelize.col('vod.icon_url')), 'poster_path']],
    where: {
      adult_content: false
    },
    order: [['clicks', 'DESC']],
    limit: 15,
  }).then(vods => {
    response.send_res(req, res, vods, 200, 1, 'OK_DESCRIPTION', 'OK_DATA', 'private,max-age=86400');
  }).catch(err => {
    winston.error('Getting list of vod failed with error: ', err);
    response.send_res(req, res, [], 706, -1, 'DATABASE_ERROR_DESCRIPTION', 'DATABASE_ERROR_DATA', 'no-store');
  });
}


/**
 * @api {get} /apiv3/guest/feeds/shows Get Tv Shows Guest
 * @apiVersion 0.3.0
 * @apiName GetTvShowsGuest
 * @apiGroup FEEDS
 *
 * @apiDescription Get tv shows of guest on homepage
 *
 * @apiSuccessExample Success-Response:
 *   HTTP/1.1 200 OK
 *     {
 *       "status_code": 200,
 *       "error_code": 1,
 *       "timestamp": 1,
 *       "error_description": "OK",
 *       "extra_data": "OK_DATA",
 *       "response_object": [
 *          "id": 1,
 *          "title": "Sherlock Holmes",
 *          "poster_path": "https://beta-backoffice.tibo.tv/files/vod/herlockicons01.jpg",
 *          "tv_seasons": [
 *              {
 *                  "id": 1,
 *                  "season_number": 1,
 *                  "title": "Sherlock Holmes - season 1"
 *              },
 *              {
 *                  "id": 2,
 *                  "season_number": 2,
 *                  "title": "Sherlock Holmes - season 2"
 *              }
 *          ]
 *          ...
 *       ]
 *     }
 *
 *
 * @apiErrorExample Error-Response:
 *  HTTP/1.1 200 OK
 *  {
 *     "status_code": 706,
 *     "error_code": -1,
 *     "timestamp": 1,
 *     "extra_data": "DATABASE_ERROR_DATA",
 *     "response_object": []
 *  }
 *
 */
exports.getFeedShowsGuest = function (req, res) {
  let companyId = req.headers.company_id ? req.headers.company_id : 1

  models.tv_series.findAll({
    attributes: ['id', 'title', [db.sequelize.fn("concat", req.app.locals.backendsettings[companyId].assets_url, db.sequelize.col('tv_series.icon_url')), 'poster_path']],
    where: {
      company_id: companyId,
      expiration_time: {
        [Op.gte]: Date.now()
      }
    },
    include: [
      {
        model: models.tv_season,
        attributes: ['id', 'season_number', 'title'],
        required: false,
        where: { expiration_time: { [Op.gte]: Date.now() }, is_available: true }
      }
    ],
    order: ['id'],
    limit: 15
  }).then(tvSeries => {
    response.send_res(req, res, tvSeries, 200, 1, 'OK_DESCRIPTION', 'OK_DATA', 'private,max-age=86400');
  }).catch(err => {
    winston.error('Getting list of series failed with error: ', err);
    response.send_res(req, res, [], 706, -1, 'DATABASE_ERROR_DESCRIPTION', 'DATABASE_ERROR_DATA', 'no-store');
  })
}


/**
 * @api {get} /apiv3/guest/feeds/movies/new Get New Movie Releases Guest
 * @apiVersion 0.3.0
 * @apiName GetNewMovieReleasesGuest
 * @apiGroup FEEDS
 *
 * @apiDescription Get new movie release of guest for homepage
 *
 * @apiSuccessExample Success-Response:
 *   HTTP/1.1 200 OK
 *     {
 *       "status_code": 200,
 *       "error_code": 1,
 *       "timestamp": 1,
 *       "error_description": "OK",
 *       "extra_data": "OK_DATA",
 *       "response_object": [
 *          "id": 1,
 *          "title": "Sherlock Holmes",
 *          "poster_path": "https://beta-backoffice.tibo.tv/files/vod/herlockicons01.jpg",
 *          "tv_seasons": [
 *              {
 *                  "id": 1,
 *                  "season_number": 1,
 *                  "title": "Sherlock Holmes - season 1"
 *              },
 *              {
 *                  "id": 2,
 *                  "season_number": 2,
 *                  "title": "Sherlock Holmes - season 2"
 *              }
 *          ]
 *          ...
 *       ]
 *     }
 *
 *
 * @apiErrorExample Error-Response:
 *  HTTP/1.1 200 OK
 *  {
 *     "status_code": 706,
 *     "error_code": -1,
 *     "timestamp": 1,
 *     "extra_data": "DATABASE_ERROR_DATA",
 *     "response_object": []
 *  }
 *
 */
exports.getNewArrivalsGuest = function (req, res) {
  let companyId = req.headers.company_id ? req.headers.company_id : 1

  let options = {
    attributes: ['id', 'title', 'release_date', [db.sequelize.fn("concat", req.app.locals.backendsettings[companyId].assets_url, db.sequelize.col('vod.image_url')), 'backdrop_path']],
    where: {
      adult_content: false
    },
    order: [['createdAt', 'DESC']],
    limit: 10
  }

  models.vod.findAll(options)
    .then(vods => {
      response.send_res(req, res, vods, 200, 1, 'OK_DESCRIPTION', 'OK_DATA', 'no-store');
    }).catch(err => {
      winston.error('Getting list of vod failed with error: ', err);
      response.send_res(req, res, [], 706, -1, 'DATABASE_ERROR_DESCRIPTION', 'DATABASE_ERROR_DATA', 'no-store');
    });
}