'use strict';

const path = require('path');
const response = require(path.resolve("./config/responses.js"));
const winston = require('winston');
const axios = require('axios');
const htmlToText = require('html-to-text');
const xml2js = require('xml2js');
const Joi = require('joi');
const cheerio = require('cheerio');


/**
 * @api {get} /apiv3/news/list Get News
 * @apiVersion 0.3.0
 * @apiName GetNews
 * @apiGroup NEWS
 *
 * @apiHeader {String} auth Auth string generated by the application.
 * @apiParam (Path parameter) {Number} page Value from 1 to 4, mandatory value coming from frontend
 * @apiDescription Get news from TiBO website
 * 
 * @apiSuccessExample Success-Response:
 *     HTTP/1.1 200 OK
 *     {
 *       "status_code": 200,
 *       "error_code": 1,
 *       "timestamp": 1,
 *       "error_description": "OK",
 *       "extra_data": "OK_DATA",
 *       "response_object": [
 *          {
 *             "source": "string",
 *             "title": "string",
 *             "image": "string",
 *             "description": "string"
 *             "timestamp": number
 *          },
 *          ...
 *       ]
 *     }
 * 
 * 
 * @apiErrorExample Error-Response:
 *  HTTP/1.1 200 OK
 *  {
 *     "status_code": 706,
 *     "error_code": -1,
 *     "timestamp": 1,
 *     "extra_data": "FEED_ERROR_DATA",
 *     "response_object": []
 *  }
 * 
 */


// get first page images
/* function getLinkImage(url) {
  return axios.get(url)
    .then(response => {
      let imageUrl = $('body')
      .find(".fusion-image-wrapper > img")
      .map((index, data) => {
        //console.log(index, data.attribs.src);
        return data.attribs.src;
      });

    let time = $('body')
      .find("div > div.fusion-post-content-wrapper > div.fusion-post-content.post-content > p > span:nth-child(2)")
      .map((index, data) => {
        //console.log(index, Date.parse(data.children[0].data));
        return Date.parse(data.children[0].data);
      });

    let result = imageUrl.map((index, url) => {
      return {
        url: url,
        time: time[index]
      }
    })

    return Promise.resolve(result);
    }).catch(e => {
      console.log(e);
    })
} */

async function scrapePostImageFromLink(url) {
  try {
    let response = await axios.get(url);
    let $ = cheerio.load(response.data);
    let imageUrl = $('body').find("div.fusion-flexslider.flexslider.post-slideshow.fusion-post-slideshow > ul.slides > li > a").attr('href');

    return Promise.resolve(imageUrl);
  } catch (error) {
    return Promise.reject(error);
  }
}

exports.newsList = async (req, res) => {
  try {
    const queryParam = Joi.number().integer().min(1).max(4).default(1);
    const { error, value } = queryParam.validate(req.query.page);
    if (error) {
      winston.error("Query parameter 'page' is not correct: ", error.message);
      return response.send_res_get(req, res, [], 400, -1, 'BAD_REQUEST_DESCRIPTION', 'BAD_REQUEST_DATA', 'no-store');
    }

    const parser = new xml2js.Parser();
    let tiboFeedXml = await axios.get(`https://tibo.tv/feed/?paged=${value}`);
    let tiboFeedJson = await parser.parseStringPromise(tiboFeedXml.data);

    const source = tiboFeedJson.rss.channel[0].title[0] === 'TiBO IPTV' ? tiboFeedJson.rss.channel[0].title[0] : 'TiBO IPTV';
    //let imageUrl = await scrapePostImageFromLink('https://tibo.tv/blog');

    let result = [];
    if (tiboFeedJson.rss.channel[0].item && tiboFeedJson.rss.channel[0].item.length > 0) {
      for (const news of tiboFeedJson.rss.channel[0].item) {
        //let imageUrl = await scrapePostImageFromLink(news.link[0]);
        let description = htmlToText.fromString(news['content:encoded'], {
          ignoreImage: true,
          ignoreHref: true,
          singleNewLineParagraphs: true,
          noAnchorUrl: false
        }).split("ishte i pari")[0].replace(/\n/g, ' ');
        const regex = /(http(s?):)([/|.|\w|çÇëË|\s|-])*\.(?:jpg|jpeg|png)/;
        const imageUrl = regex.exec(news['content:encoded']) ? regex.exec(news['content:encoded'])[0] : "";
        result.push({
          source: source,
          title: news.title[0],
          image: imageUrl,
          description: description,
          timestamp: Date.parse(news.pubDate[0])
        })
      }
    }
    response.send_res(req, res, result, 200, 1, 'OK_DESCRIPTION', 'OK_DATA', 'private,max-age=43200'); //12 hours of cache if news aren't updated frequently
  } catch (error) {
    winston.error("Getting a list of the news failed with error: ", error);
    response.send_res_get(req, res, [], 706, -1, 'FEED_ERROR_DESCRIPTION', 'FEED_ERROR_DATA', 'no-store');
  }
}


/**
 * @api {get} /apiv3/guest/news/list Get News Guest
 * @apiVersion 0.3.0
 * @apiName GetNewsGuest
 * @apiGroup NEWS
 *
 * @apiParam (Path parameter) {Number} page Value from 1 to 4, mandatory value coming from frontend
 * @apiDescription Get news from TiBO website
 * 
 * @apiSuccessExample Success-Response:
 *     HTTP/1.1 200 OK
 *     {
 *       "status_code": 200,
 *       "error_code": 1,
 *       "timestamp": 1,
 *       "error_description": "OK",
 *       "extra_data": "OK_DATA",
 *       "response_object": [
 *          {
 *             "source": "string",
 *             "title": "string",
 *             "image": "string",
 *             "description": "string"
 *             "timestamp": number
 *          },
 *          ...
 *       ]
 *     }
 * 
 * 
 * @apiErrorExample Error-Response:
 *  HTTP/1.1 200 OK
 *  {
 *     "status_code": 706,
 *     "error_code": -1,
 *     "timestamp": 1,
 *     "extra_data": "FEED_ERROR_DATA",
 *     "response_object": []
 *  }
 * 
 */
exports.newsListGuest = async (req, res) => {
  try {
    const queryParam = Joi.number().integer().min(1).max(4).default(1);
    const { error, value } = queryParam.validate(req.query.page);
    if (error) {
      winston.error("Query parameter 'page' is not correct: ", error.message);
      return response.send_res_get(req, res, [], 400, -1, 'BAD_REQUEST_DESCRIPTION', 'BAD_REQUEST_DATA', 'no-store');
    }

    const parser = new xml2js.Parser();
    let tiboFeedXml = await axios.get(`https://tibo.tv/feed/?paged=${value}`);
    let tiboFeedJson = await parser.parseStringPromise(tiboFeedXml.data);

    const source = tiboFeedJson.rss.channel[0].title[0] === 'TiBO IPTV' ? tiboFeedJson.rss.channel[0].title[0] : 'TiBO IPTV';

    let result = [];
    if (tiboFeedJson.rss.channel[0].item && tiboFeedJson.rss.channel[0].item.length > 0) {
      for (const news of tiboFeedJson.rss.channel[0].item) {
        let description = htmlToText.fromString(news['content:encoded'], {
          ignoreImage: true,
          ignoreHref: true,
          singleNewLineParagraphs: true,
          noAnchorUrl: false
        }).split("ishte i pari")[0].replace(/\n/g, ' ');
        const regex = /(http(s?):)([/|.|\w|çÇëË|\s|-])*\.(?:jpg|jpeg|png)/;
        const imageUrl = regex.exec(news['content:encoded']) ? regex.exec(news['content:encoded'])[0] : "";
        result.push({
          source: source,
          title: news.title[0],
          image: imageUrl,
          description: description,
          timestamp: Date.parse(news.pubDate[0])
        })
      }
    }
    response.send_res(req, res, result, 200, 1, 'OK_DESCRIPTION', 'OK_DATA', 'private,max-age=43200'); //12 hours of cache if news aren't updated frequently
  } catch (error) {
    winston.error("Getting a list of the news failed with error: ", error);
    response.send_res_get(req, res, [], 706, -1, 'FEED_ERROR_DESCRIPTION', 'FEED_ERROR_DATA', 'no-store');
  }
}